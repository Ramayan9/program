
# Program 1: Reverse String
def reverse_string(s):
    return s[::-1]

# Example usage
input_string = input("Enter a string: ")
reversed_string = reverse_string(input_string)
print(f"Reversed string: {reversed_string}")


# Program 2: Least Common Multiple (LCM)
import math

def lcm(a, b):
    return abs(a * b) // math.gcd(a, b)

# Example usage
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
print(f"LCM of {num1} and {num2} is {lcm(num1, num2)}")


# Program 3: Switch Case Simulation using Dictionary
def addition(a, b):
    return a + b

def subtraction(a, b):
    return a - b

def multiplication(a, b):
    return a * b

def division(a, b):
    if b == 0:
        return "Cannot divide by zero"
    return a / b

def switch_case(option, a, b):
    switch = {
        1: addition(a, b),
        2: subtraction(a, b),
        3: multiplication(a, b),
        4: division(a, b)
    }
    return switch.get(option, "Invalid option")

# Example usage
print("Select an option:")
print("1. Addition")
print("2. Subtraction")
print("3. Multiplication")
print("4. Division")

option = int(input("Enter your choice: "))
a = float(input("Enter first number: "))
b = float(input("Enter second number: "))
result = switch_case(option, a, b)
print(f"Result: {result}")


# Program 4: Linear Regression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import numpy as np
import pandas as pd

# Example dataset
data = {
    'X': [1, 2, 3, 4, 5],
    'Y': [1.5, 3.0, 4.5, 6.0, 7.5]
}
df = pd.DataFrame(data)

# Splitting data into training and testing sets
X = df[['X']]  # Features
y = df['Y']    # Target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Results
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
print("Mean Squared Error:", mean_squared_error(y_test, y_pred))


# Program 5: Random Forest
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load Iris dataset
data = load_iris()
X, y = data.data, data.target

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Results
print("Accuracy:", accuracy_score(y_test, y_pred))


# Program 6: K-Nearest Neighbors (KNN)
from sklearn.neighbors import KNeighborsClassifier
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Load Iris dataset
data = load_iris()
X, y = data.data, data.target

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = KNeighborsClassifier(n_neighbors=3)  # Using 3 neighbors
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Results
print("Accuracy:", accuracy_score(y_test, y_pred))


# Program 7: Factorial
def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n - 1)

# Example usage
num = int(input("Enter a number: "))
print(f"Factorial of {num} is {factorial(num)}")


# Program 8: Area of Triangle
def area_of_triangle(base, height):
    return 0.5 * base * height

# Example usage
base = float(input("Enter base of the triangle: "))
height = float(input("Enter height of the triangle: "))
print(f"Area of the triangle is {area_of_triangle(base, height)}")


# Program 9: Area of Circle
import math

def area_of_circle(radius):
    return math.pi * radius ** 2

# Example usage
radius = float(input("Enter radius of the circle: "))
print(f"Area of the circle is {area_of_circle(radius)}")


# Program 10: Area of Rectangle
def area_of_rectangle(length, width):
    return length * width

# Example usage
length = float(input("Enter length of the rectangle: "))
width = float(input("Enter width of the rectangle: "))
print(f"Area of the rectangle is {area_of_rectangle(length, width)}")


# Program 11: Palindrome
def is_palindrome(string):
    return string == string[::-1]

# Example usage
word = input("Enter a word: ")
if is_palindrome(word):
    print(f"{word} is a palindrome")
else:
    print(f"{word} is not a palindrome")


# Program 12: Perfect Number
def is_perfect_number(n):
    divisors = [i for i in range(1, n) if n % i == 0]
    return sum(divisors) == n

# Example usage
num = int(input("Enter a number: "))
if is_perfect_number(num):
    print(f"{num} is a perfect number")
else:
    print(f"{num} is not a perfect number")


# Program 13: Water Jug Problem
from collections import deque

def water_jug_problem(jug1, jug2, target):
    visited = set()
    queue = deque([(0, 0)])  # (amount in jug1, amount in jug2)

    while queue:
        state = queue.popleft()
        if state in visited:
            continue
        visited.add(state)
        
        jug1_amt, jug2_amt = state
        print(f"State: {state}")
        
        if jug1_amt == target or jug2_amt == target:
            return True

        # Generate possible states
        next_states = [
            (jug1, jug2_amt),  # Fill jug1
            (jug1_amt, jug2),  # Fill jug2
            (0, jug2_amt),     # Empty jug1
            (jug1_amt, 0),     # Empty jug2
            (min(jug1, jug1_amt + jug2_amt), max(0, jug2_amt - (jug1 - jug1_amt))),  # Pour jug2 -> jug1
            (max(0, jug1_amt - (jug2 - jug2_amt)), min(jug2, jug1_amt + jug2_amt))   # Pour jug1 -> jug2
        ]
        queue.extend(next_states)

    return False

# Example usage
jug1_capacity = int(input("Enter capacity of jug 1: "))
jug2_capacity = int(input("Enter capacity of jug 2: "))
target = int(input("Enter target amount: "))
if water_jug_problem(jug1_capacity, jug2_capacity, target):
    print("Target can be reached")
else:
    print("Target cannot be reached")


# Program 14: GCD
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Example usage
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
print(f"GCD of {num1} and {num2} is {gcd(num1, num2)}")
